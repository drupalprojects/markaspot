<?php

/**
 * This module provides styles, scripts and views for Mark-a-Spot Installation
 * and implements some server-side validation and geocoding
 *
 */


function markaspot_logic_form_alter(&$form, &$form_state, $form_id) {

  global $user;
  if ($form_id == 'report_node_form') {
    $form['field_address']['und'][0]['value']['#type'] = "hidden";
    // Registered users' mail will be prefilled
    // if (isset($user->mail) && arg(0) == 'node' && arg(1) == 'add'){
    //   $form['field_e_mail']['und'][0]['value']['#default_value'] = $user->mail;
    // }
    $form['#validate'][] = 'markaspot_logic_validate';
  }
}

function markaspot_logic_validate($node, &$form) {

    $mail = $form['values']['field_e_mail']['und'][0]['value'];

    if (!valid_email_address($mail)) {
      // form_set_error('field_e_mail', t('Please enter a valid e-mail address.'));
    }

    /* Bounding Box*/
    $lat = $form['values']['field_geo']['und'][0]['lat'];
    $lon = $form['values']['field_geo']['und'][0]['lng'];
    $nw = FALSE;
    $se = FALSE;
    $bbox = array(
      'nw' => array('lat' => variable_get('bbox_nw_lat'), 'lng' => variable_get('bbox_nw_lng')),
      'se' => array('lat' => variable_get('bbox_se_lat'), 'lng' => variable_get('bbox_se_lng')),
    );

    if  (($bbox['nw']['lat'] >= $lat) && ($bbox['nw']['lng'] <= $lon)) {
     $nw = TRUE;
    }
    if  (($bbox['se']['lat'] <= $lat) && ($bbox['se']['lng'] >= $lon)) {
     $se = TRUE;
    }


    if (!strstr($form['values']['field_geo']['und'][0]['address']['field'], variable_get('markaspot_city'))) {
      form_set_error('field_geo', t('The string given for "City" is not valid'));
    }
    else if ($se == FALSE || $nw == FALSE) {
      form_set_error('field_geo', t('The position does not seem to be inside a valid bounding box in ' . variable_get('markaspot_city')));
    }
    else {
      // Fill the address field only, if it's not equal to the initial value
      if ($form['values']['field_geo']['und'][0]['lat'] != variable_get('markaspot_ini_lat')) {
        $form['values']['field_address']['und'][0]['value'] = $form['values']['field_geo']['und'][0]['address']['field'];
      } else {
        form_set_error('field_geo', t('Please enter a location, different from the default one'));
      }
    }

}

/**
 * Implementation of hook_node_presave()
 * Need to fill the title field with unavailable token
 *
 */

function markaspot_node_presave($node) {
  // if ($node->title == "") {
  //   $node->title = $node->field_address["und"][0]["value"];
  // }
}


function markaspot_logic_css_alter(&$css){
  unset($css['misc/ui/jquery.ui.core.css']);
}

/**
 * Implementation of hook_init()
 *
 * - adds some php information to js
 * - adds css
 * - needs refactoring for leaflet
 *
 */

function markaspot_logic_init() {
  $node = menu_get_object();
  $type = (isset($node)) ? $node->type : null ;
  drupal_add_js(array(
    'mas' => array(
      'markaspot_address' => variable_get('markaspot_address'),
      'markaspot_city' => variable_get('markaspot_city'),
      'markaspot_zip' => variable_get('markaspot_zip'),
      'markaspot_ini_lat' => variable_get('markaspot_ini_lat'),
      'markaspot_ini_lng' => variable_get('markaspot_ini_lng'),
      // 'cloudmade_api_key' => variable_get('cloudmade_api_key'),
      // 'osm_custom_tile_url' => variable_get('osm_custom_tile_url'),
      // 'osm_custom_attribution' => variable_get('osm_custom_attribution'),
      'bbox_nw_lat' => variable_get('bbox_nw_lat'),
      'bbox_nw_lng' => variable_get('bbox_nw_lng'),
      'bbox_se_lat' => variable_get('bbox_se_lat'),
      'bbox_se_lng' => variable_get('bbox_se_lng'),
      'uri' => request_uri(),
      'node_type' => $type,
      //'countVotes' => markaspot_logic_getCountVotes(),
      'params' => $_GET)),
    'setting'
  );

  if (variable_get('markaspot_map_type') == 1) {
    drupal_add_js(array(
      'mas' => array(
        'cloudmade_api_key' => variable_get('cloudmade_api_key'),
      )),
      'setting'
    );
  } else {
    drupal_add_js(array(
      'mas' => array(
        'osm_custom_tile_url' => variable_get('osm_custom_tile_url'),
        'osm_custom_attribution' => variable_get('osm_custom_attribution'),
      )),
      'setting'
    );
  }


  drupal_add_js(drupal_get_path('module','markaspot_logic'). '/markaspot_logic.js');
  drupal_add_css(drupal_get_path('profile','markaspot') . '/libraries/Leaflet.awesome-markers/dist/leaflet.awesome-markers.css');
  drupal_add_css(drupal_get_path('profile','markaspot') . '/libraries/markaspot-font/style.css');

  //  drupal_set_message($type, 'status', FALSE);
  // Add some css to show which line is output by which script

  if (arg(0) == "list" || arg(0) == "map" || drupal_is_front_page() == TRUE){
    drupal_add_js(drupal_get_path('profile','markaspot')
     . '/libraries/spin.js/dist/spin.min.js', null);

    if (variable_get('markaspot_map_type') == 0) {

      drupal_add_js('https://maps.google.com/maps/api/js?sensor=true&v=3.1.3', 'external');
      drupal_add_js(drupal_get_path('module', 'markaspot_logic') . '/js/markerclusterer.js', null);
      drupal_add_js(drupal_get_path('module', 'markaspot_logic') . '/js/mapiconmaker_packed.js', null);
      drupal_add_js(drupal_get_path('module', 'markaspot_logic') . '/js/markers_googlemaps.js', null);
    } else {
      drupal_add_css(drupal_get_path('profile','markaspot') . '/libraries/Leaflet/leaflet.css');
      drupal_add_css(drupal_get_path('profile','markaspot') . '/libraries/Leaflet/leaflet.ie.css', array(
        'group' => CSS_THEME,
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE
          )
      ));
      drupal_add_css(drupal_get_path('profile','markaspot') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.css');
      drupal_add_css(drupal_get_path('profile','markaspot') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.Default.css');
      drupal_add_css(drupal_get_path('profile','markaspot') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.Default.ie.css', array(
        'group' => CSS_THEME,
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE
          )
      ));


      drupal_add_js(drupal_get_path('profile','markaspot') . '/libraries/Leaflet/leaflet.js');

      drupal_add_js(drupal_get_path('module', 'markaspot_logic') . '/js/markers_leaflet.js');
      drupal_add_js(drupal_get_path('profile','markaspot') . '/libraries/Leaflet.awesome-markers/dist/leaflet.awesome-markers.min.js', null);

      drupal_add_js(drupal_get_path('profile','markaspot') . '/libraries/Leaflet.markercluster/dist/leaflet.markercluster.js', null);

    }
  }
  drupal_add_css(drupal_get_path('module', 'custom') . '/css/custom.css', array(
    'group' => CSS_DEFAULT, 'every_page' => TRUE));
  drupal_add_css(drupal_get_path('module', 'markaspot_logic') . '/css/mas-style.css');
}

function markaspot_logic_getCountVotes(){
  $list_items = db_query("(SELECT COUNT(*)as Votes FROM {votingapi_vote})");
  foreach ($list_items as $record) {
     return $record->votes;
  }
}


/**
 * Implementation of hook_menu()
 *
 * - Callback to feedback page accessible for all
 * - Menu item for system settings page accessible for admins
 *
 */
function markaspot_logic_menu() {
  $items = array();

  $items['admin/config/system/mark_a_spot'] = array(
    'title' => 'Mark-a-Spot',
    'description' => 'Basic configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('markaspot_logic_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),

  );
   $items['admin/config/system/mark_a_spot/tweets/import'] = array(
    'title' => 'Manual twitter import',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Manual twitter import',
    'page callback' => '_markaspot_tweet311_import_manual',
    'access arguments' => array('administer twitter import'),
    'file' => 'markaspot_tweet311.module',
    'file path' => drupal_get_path('module', 'markaspot_tweet311')
  );
  // For translation
  //t('No account yet?');

  return $items;
}





/**
 * System settings form on admin settings page,
 * accessible only by admins via menu access restriction
 *
 * - Set interval lat and lon default value.
 *
 * @return unknown
 */
function markaspot_logic_admin_settings() {

  $form = array();
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
    '#collapsible' => TRUE);
  $form['general']['markaspot_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Initial Address'),
    '#default_value' => variable_get('markaspot_address', _markaspot_logic_defaults('markaspot_address')),
    '#size' => '128',
    '#maxlength' => 128,
    '#description' => t('Insert the initial address'),
  );

  $form['general']['markaspot_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => variable_get('markaspot_city', _markaspot_logic_defaults('markaspot_city')),
    '#size' => '16',
    '#maxlength' => 16,
    '#description' => t('Insert the municipality'),
  );

  $form['general']['markaspot_ini_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Inital Lat'),
    '#default_value' => variable_get('markaspot_ini_lat', _markaspot_logic_defaults('markaspot_ini_lat')),
    '#size' => '16',
    '#maxlength' => 32,
    '#description' => t('Insert the initial latitude'),
  );
  $form['general']['markaspot_ini_lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Inital Lng'),
    '#default_value' => variable_get('markaspot_ini_lng', _markaspot_logic_defaults('markaspot_ini_lng')),
    '#size' => '16',
    '#maxlength' => 32,
    '#description' => t('Insert the initial longitude'),
  );
  $form['types']['markaspot_map_type'] = array(
  '#type' => 'radios',
  '#title' => t('Map type'),
  '#default_value' => variable_get('markaspot_map_type', 0),
  '#options' => array(t('Google Maps'), t('Cloudmade'), t('Other OSM'))
  );
  $form['types']['cloudmade_api_key'] = array (
    '#type' => 'textfield',
    '#title' => t('Cloudmade API Key'),
    '#default_value' => variable_get('cloudmade_api_key'),
    '#description' => t('Insert your API Key here')
  );
  $form['types']['osm']['osm_custom_tile_url'] = array (
    '#type' => 'textfield',
    '#title' => t('Tile URL, if not from Cloudmade'),
    '#default_value' => variable_get('osm_custom_tile_url', _markaspot_logic_defaults('osm_custom_tile_url')),
    '#description' => t('If you want to use a different tile service or https with cloudmade, enter the url pattern, e.g. http://{s}.somedomain.com/your-api-key/{z}/{x}/{y}.png')
  );
  $form['types']['osm']['osm_custom_attribution'] = array (
    '#type' => 'textfield',
    '#title' => t('Attribution Statement, if not from Cloudmade'),
    '#default_value' => variable_get('osm_custom_attribution', _markaspot_logic_defaults('osm_custom_attribution')),
    '#description' => t('If you use an alternative Operator for serving tiles show special attribution')
  );

  $form['bbox'] = array(
      '#type' => 'fieldset',
      '#title' => t('Bounding Box'),
      '#collapsible' => TRUE,
      '#description' => t('Define an area within all reports will be based on a valid location'),
    );

  $form['bbox']['bbox_nw_lat'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('bbox_nw_lat', _markaspot_logic_defaults('bbox_nw_lat')),
    '#title' => t('North-West latitude.'),
  );
  $form['bbox']['bbox_nw_lng'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('bbox_nw_lng', _markaspot_logic_defaults('bbox_nw_lng')),
    '#title' => t('North-West longitude.'),
  );

  $form['bbox']['bbox_se_lat'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('bbox_se_lat', _markaspot_logic_defaults('bbox_se_lat')),
    '#title' => t('South-East latitude.'),
  );
  $form['bbox']['bbox_se_lng'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('bbox_se_lng', _markaspot_logic_defaults('bbox_se_lng')),
    '#title' => t('South-East longitude.'),
  );
  if (module_exists('markaspot_open311')){
    $form['open311'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open311 Service Discovery'),
      '#collapsible' => TRUE,
      '#description' => t('See http://wiki.open311.org/Service_Discovery. This service discovery specification is meant to be read-only and can be provided either dynamically or using a manually edited static file.'),
    );

    $form['open311']['open311_contact'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('open311_contact', _markaspot_logic_defaults('open311_contact')),
      '#title' => t('Open311 Contact Details'),
    );
    $form['open311']['open311_type'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('open311_type', _markaspot_logic_defaults('open311_type')),
      '#title' => t('Open311 Server type. Either "production" or "test" defines whether the information is live and will be acted upon'),
    );
    $form['open311']['open311_key_service'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('open311_key_service', _markaspot_logic_defaults('open311_key_service')),
      '#title' => t('Human readable information on how to get an API key'),
    );
    $form['open311']['open311_changeset'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('open311_changeset', _markaspot_logic_defaults('open311_changeset')),
      '#title' => t('Sortable field that specifies the last time this document was updated'),
    );
    $form['open311']['open311_status_open_start'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('open311_status_open_start', _markaspot_logic_defaults('open311_status_open_start')),
      '#title' => t('Enter the Status term-id when creating reports'),
    );
    $form['open311']['open311_status_open'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('open311_status_open', _markaspot_logic_defaults('open311_status_open')),
      '#title' => t('Enter the Taxonomy term-ids for open reports (comma-separated)'),
    );
    $form['open311']['open311_status_closed'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('open311_status_closed', _markaspot_logic_defaults('open311_status_closed')),
      '#title' => t('Enter the Taxonomy term-ids for closed reports (comma-separated)'),
    );
  }
  if (module_exists('markaspot_archive')){
    $form['archive'] = array(
        '#type' => 'fieldset',
        '#title' => t('Archive Settings'),
        '#collapsible' => TRUE,
        '#description' => t('Set the period in days since reports have been last edited. Closed reports earlier than this period will be archived automatically'),
      );
    $form['archive']['archive_days'] = array(
      '#type' => 'textfield',
      '#size' => '2',
      '#default_value' => variable_get('archive_days', _markaspot_logic_defaults('archive_days')),
      '#title' => t('Days'),
    );
  }

  if (module_exists('markaspot_tweet311')){
    $form['twitter'] = array (
      '#type' => 'fieldset',
      '#title' => t('Tweet311 Settings'),
      '#description' => t('Let Twitter-Users sending issues by sending mentions to ').variable_get('markaspot_twittername').'. '.t('Tweet-location should be enabled. ').t('Tweets are applied to category-id by hashtag (#id)')
    );

    $form['twitter']['markaspot_twittername'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter Name '),
      '#default_value' => variable_get('markaspot_twittername', _markaspot_logic_defaults('markaspot_twittername')),
      '#size' => '16',
      '#maxlength' => 16,
      '#description' => t('Which Twitter-Username will be searched for mentions'),
    );
    $form['twitter']['manual_import'] = array(
      '#markup' => '<p>' . l(t('Manually import tweets'), 'admin/config/system/mark_a_spot/tweets/import') . '</p>',
    );
    $form['twitter']['markaspot_tweetSearch'] = array(
      '#type' => 'radios',
      '#title' => t('Search in tweets for #hashtags or Service Code'),
      '#default_value' => variable_get('markaspot_tweetSearch'),
      '#options' => array(t('Hash'), t('Service Code')),
    );
  }

  return system_settings_form($form);
}


function markaspot_logic_page_alter(&$page) {
  // Add help text to the user login block.
  $page['footer']['system_powered-by'] = array(
    '#weight' => -10,
    // please be nice, give attribution
    '#markup' => '<span>'.t('Built with <a id="mas-link" href="http://mark-a-spot.org">Mark-a-Spot</a>').'</span>',
  );
}


/**
 * Default texts for text variables that build the configuration page.
 * Texts that can be configured on the settings page.
 *
 * @param string $id
 * @return string
 */
function _markaspot_logic_defaults($id) {
  switch ($id) {
    case 'markaspot_ini_lat':
      return '50.8212596';
    case 'markaspot_ini_lng':
      return '6.8961028';
    case 'markaspot_address':
      return 'Pingsdorfer Straße 88, 50321 Brühl, Deutschland';
    case 'markaspot_zip':
      return '50321';
    case 'markaspot_city':
      return 'Brühl';
    case 'markaspot_country':
      return 'Deutschland';
    case 'markaspot_twittername':
      return '@mascity';
    case 'markaspot_ini_tweetSearch':
      return '1';
    case 'bbox_nw_lat':
      return '50.8463';
    case 'bbox_nw_lng':
      return '6.832';
    case 'bbox_se_lat':
      return '50.8042';
    case 'bbox_se_lng':
      return '6.937';
    case 'archive_days':
      return '30';
    case 'open311_contact':
      return 'You can email or call for assistance api@mycity.org +1 (555) 555-5555';
    case 'open311_status_open_start':
      return '5';
    case 'open311_status_open':
      return '5,6';
    case 'open311_status_closed':
      return '7,8';
    case 'open311_changeset':
      return '2013-11-03 00:00';
    case 'open311_key_service':
      return 'You can request a key here: http://api.mycity.gov/api_key/request';
    case 'open311_type':
      return 'production';
    case 'osm_custom_tile_url':
      return 'http://';
    case 'osm_custom_attribution':
      return 'Map Data © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';
  }
}



function markaspot_logic_block_info() {

  $blocks['taxonomy_category'] = array(
    // info: The name of the block.
    'info' => t('Mark-a-Spot Categories'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['taxonomy_status'] = array(
    // info: The name of the block.
    'info' => t('Mark-a-Spot Status'),
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );
  $blocks['markaspot_map'] = array(
    // info: The name of the block.
    'info' => t('Mark-a-Spot reports List (Map View)'),
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function markaspot_logic_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'taxonomy_category':
      $block['subject'] = t('Services');
      $block['content'] = markaspot_logic_contents($delta);
    break;
    case 'taxonomy_status':
      $block['subject'] = t('Status');
      $block['content'] = markaspot_logic_contents($delta);
    break;
    case 'markaspot_map':
      $block['subject'] = t('reportList');
      $block['content'] = markaspot_logic_contents($delta);
    break;
  }
  return $block;
}



/**
 * A module-defined block content function.
 */
function markaspot_logic_contents($which_block) {
  switch ($which_block) {
    case 'taxonomy_category':
      $list_category  = null;
      $list_category .= '<div class="btn-group dropdown"><button class="btn btn-primary" data-toggle="dropdown">'.t('Services').'</button>';
      $list_category .= '<button class="btn btn-primary dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>';

      $alter['html'] = TRUE;
      $alter['max_length'] = 125;
      $alter['word_boundary'] = true;
      $alter['ellipsis'] = true;
      $list_category   .= '<ul class="dropdown-menu">';

      $list_category   .= '<li class="marker-category-wrapper-all">'. l(t('All'), '', array('attributes' => array('class' => 'map-menue-all marker-category'))).'</li>';
      $taxonomies = taxonomy_get_tree(1, $parent = 0, $max_depth = 1, $load_entities = TRUE);
      foreach ($taxonomies as $term) {
        $list_category .= '<li class="marker-status-wrapper">' . l('<span class="icon-' . $term->field_category_icon['und'][0]['value'] .'"></span> ' . views_trim_text($alter, $term->name),'taxonomy/term/'. $term->tid, array('attributes' => array('class' => 'map-menue marker-category col-'.$term->field_category_hex['und'][0]['value'], 'id' => 'tax-'.$term->tid), 'html' => TRUE)) .'</li>';
      }
      $list_category   .= '</ul>';
      $list_category   .= '</div>';

      return $list_category;
    break;
    case 'taxonomy_status':
      $list_status  = null;
      $list_status .= '<div class="btn-group dropdown"><button class="btn btn-primary" data-toggle="dropdown">'.t('Status').'</button>';
      $list_status .= '<button class="btn btn-primary dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>';


      $alter['html'] = TRUE;
      $alter['max_length'] = 25;
      $alter['word_boundary'] = true;
      $alter['ellipsis'] = true;
      //views_trim_text($alter, $output);
      $list_status .= '<ul class="dropdown-menu">';
      $list_status   .= '<li class="marker-status-wrapper-all">'. l(t('All'), '', array('attributes' => array('class' => 'map-menue-all marker-status'))).'</li>';

      $taxonomies = taxonomy_get_tree(2, $parent = 0, $max_depth = 1, $load_entities = TRUE);
      foreach ($taxonomies as $term) {
        $list_status .= '<li class="marker-status-wrapper">'. l('<span class="icon-' . $term->field_status_icon['und'][0]['value'] .'"></span> ' . views_trim_text($alter, $term->name),'taxonomy/term/'. $term->tid, array('attributes' => array('class' => 'map-menue marker-status col-'.$term->field_status_hex['und'][0]['value'], 'id' => 'tax-'.$term->tid), 'html' => TRUE)) .'</li>';
      }
      $list_status .= '</ul>';
      $list_status .= '</div>';

      return $list_status;
    break;
    case 'markaspot_map':
      $list_map = null;
      $list_map = '<ul id="markersidebar"></ul>';
    return $list_map;

  }
}




/*entity view modes*/

/**
* Implements hook_entity_info_alter().
*/
function markaspot_logic_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['report_list'] = array(
    'label' => t('Report List'),
    'custom settings' => TRUE,
  );
}


/**
* Implements hook_preprocess_node().
*/
function  markaspot_logic_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'report_list') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__report_list';
    // var_dump($vars['theme_hook_suggestions']);
  }
}
