<?php
// markaspot_open311.module
/**
 * Implementation of hook_rest_server_response_formatters_alter
 * http://drupal.org/node/1588044
 */


function markaspot_open311_rest_server_response_formatters_alter(&$formatters) {
    $formatters['xml']['formatter class'] = 'Open311XMLFormatter';
    $formatters['xml']['view'] = 'RESTServerViewOpen311';
    $formatters['xml']['mime types'][0] = 'text/xml';
    $formatters['json']['mime types'][0] = 'application/json';
}

class Open311XMLFormatter implements ServicesFormatterInterface {

  public function render($data) {

    $doc = new DOMDocument('1.0', 'utf-8');
    // only change root, if there is GeoReport output data

    if (array_key_exists('endpoints', $data)) {
      $root = $doc->createElement('discovery');
    }
    if (isset($data[0])){
      if (array_key_exists('code', $data[0])) {
        $root = $doc->createElement('errors');
      }
      if (array_key_exists('service_code', $data[0])) {
        $root = $doc->createElement('services');
      }
      if (array_key_exists('service_request_id', $data[0])){
        $root = $doc->createElement('service_requests');
      }
      if (array_key_exists('discovery', $data[0])){
        $root = $doc->createElement('discovery');
      }
      if (array_key_exists('service_notice', $data[0])){
        $root = $doc->createElement('service_requests');
      }
    }
    $doc->appendChild($root);
    $this->xml_recurse($doc, $root, $data);

    //unset($data[key($data)]);

    return $doc->saveXML();
  }
  private function xml_recurse(&$doc, &$parent, $data) {
      if (is_object($data)) {
        $data = get_object_vars($data);
      }


      if (is_array($data)) {

        $assoc = FALSE || empty($data);
        foreach ($data as $key => $value) {
          if (is_numeric($key)) {

            // Mark-a-Spot Integration
            // Instead of "items" geoReport v2 requires an "request" or "service"-element for arrays
            $key = 'item';
            if (array_key_exists('code', $data[0])) {
              $key = 'error';
            }

            if (array_key_exists('error', $data[0])) {
              $key = 'errors';
            }
            if (array_key_exists('service_code', $data[0])) {
              $key = 'service';
            }
            if (array_key_exists('status', $data[0])) {
              $key = 'request';
            }
            // After Posting
            if (array_key_exists('service_notice', $data[0])) {
              $key = 'request';
            }
            if (in_array('xml', $data)) {
              $key = 'format';
            }
          }
          else {
            $assoc = TRUE;
            $key = preg_replace('/[^A-Za-z0-9_]/', '_', $key);
            $key = preg_replace('/^([0-9]+)/', '_$1', $key);
          }
          $element = $doc->createElement($key);
          $parent->appendChild($element);
          $this->xml_recurse($doc, $element, $value);
        }

        if (!$assoc) {
          $parent->setAttribute('is_array', 'true');
        }
      }
      elseif ($data !== NULL) {
        $parent->appendChild($doc->createTextNode($data));
      }
    }
}




/**
* Access callback for open311 requests.
*
* @param string $op
*  The operation that's going to be performed.
* @param array $args
*  The arguments that will be passed to the callback.
* @return bool
*  Whether access is given or not.
*/

function _markaspot_open311_access($op, $args) {
  global $user;
  $access = FALSE;

  switch ($op) {
    case 'view':
      $node = markaspot_open311_get_requests($args[0]);
      $access = user_access('view open311 requests');
      $access = $access || user_access('user can view open311 requests');
      break;
    case 'create':
      //$node = markaspot_open311_get_requests($args[0]);
      $access = user_access('Report: Create new content');
      $access = $access || user_access('Report: Create new content');
      break;
  }
  $access = TRUE;

  return $access;
}




/** Gets a request object by id.
 *
 * @param int $id
 * @return object
 */
function markaspot_open311_get_requests($id) {
  return db_query('SELECT * FROM {node} WHERE nid=:id', array(':id' => $id))
           ->fetchAll();
}

/** Writes a request to the database
 *
 * @param object $request
 * @return void
 */
function markaspot_open311_write_request($node) {
  return node_save($node);
}

/**
 * Deletes a request from the database.
 *
 * @param int $id
 * @return void
 */
function markaspot_open311_delete_requests($id) {
  db_query('DELETE FROM {node} WHERE id=:id', array(':id' => $id));
}

/**
 * Implementation of hook_services_resources().
 */
function markaspot_open311_services_resources() {
  return array(
     'discovery' => array(
      'index' => array(
        'help' => 'Provides specification for the service discovery mechanism',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => '_markaspot_open311_discovery',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array()
        ),
      ),
    'requests' => array(
      'retrieve' => array(
        'help' => 'Retrieves a request',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => '_markaspot_open311_requests_retrieve',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The id of the request to get',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
      'create' => array(
        'help' => 'Creates an Open311 request',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => '_markaspot_open311_requests_create',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'source' => 'data',
            'type' => 'array',
            'description' => 'The request object',
            'source' => 'data',
            'optional' => TRUE,
          ),
        ),
      ),
      // 'update' => array(
      //   'help' => 'Updates a request',
      //   'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
      //   'callback' => '_markaspot_open311_update',
      //   'access callback' => '_markaspot_open311_access',
      //   'access arguments' => array('update'),
      //   'access arguments append' => TRUE,
      //   'args' => array(
      //     array(
      //       'name' => 'id',
      //       'type' => 'int',
      //       'description' => 'The id of the node to update',
      //       'source' => array('path' => '0'),
      //       'optional' => FALSE,
      //     ),
      //     array(
      //       'name' => 'data',
      //       'type' => 'struct',
      //       'description' => 'The request data object',
      //       'source' => 'data',
      //       'optional' => FALSE,
      //     ),
      //   ),
      // ),
      // 'delete' => array(
      //   'help' => 'Deletes a request',
      //   'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
      //   'callback' => '_markaspot_open311_delete',
      //   'access callback' => '_markaspot_open311_access',
      //   'access arguments' => array('delete'),
      //   'access arguments append' => TRUE,
      //   'args' => array(
      //     array(
      //       'name' => 'nid',
      //       'type' => 'int',
      //       'description' => 'The id of the request to delete',
      //       'source' => array('path' => '0'),
      //       'optional' => FALSE,
      //     ),
      //   ),
      // ),
      'index' => array(
        'help' => 'Retrieves a listing of requests',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
         // Callback in inc.file
        'callback' => '_markaspot_open311_requests_index',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        'args' => array(
          array(
            'name' => 'page',
            'type' => 'int',
            'description' => '',
            'source' => array(
              'param' => 'page',
            ),
            'optional' => TRUE,
            'default value' => 0,
          ),
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'services' => array(
      'retrieve' => array(
        'help' => 'Retrieves a service definition by servicecode (not yet implemented)',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
        'callback' => '_markaspot_open311_services_retrieve',
        'access callback' => '_markaspot_open311_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The service_code of the service to retrieve',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
      'index' => array(
        'help' => 'Retrieves a listing of available services',
        'file' => array('file' => 'inc', 'module' => 'markaspot_open311'),
         // Callback in inc.file
        'callback' => '_markaspot_open311_services_index',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        'args' => array(
          array(
            'name' => 'pagesize',
            'optional' => TRUE,
            'type' => 'init',
            'description' => 'Number of records to get per page.',
            'default value' => variable_get('services_taxonomy_term_index_page_size', 20),
            'source' => array('param' => 'pagesize'),
          ),
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    )
  );
}
