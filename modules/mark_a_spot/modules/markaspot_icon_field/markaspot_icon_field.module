<?php
/**
 * @file
 * markaspot_icon_field.module
 * Provides a field for attaching an icon to a fieldable entity.
 */

/**
 * Implements hook_field_info().
 */
function markaspot_icon_field_field_info() {
  return array(
    'markaspot_icon_field' => array(
      'label' => t('Markaspot Icon'),
      'description' => t('Store a bundle and icon in the database to assemble an icon field.'),
      'settings' => array(
        'bundle' => NULL,
        'icon' => NULL,
      ),
      'instance_settings' => array(
        'bundle' => NULL,
        'icon' => NULL,
      ),
      'default_widget' => 'markaspot_icon_field',
      'default_formatter' => 'markaspot_icon_field_default',
      'property_type' => 'markaspot_icon_field', // we add the propert type here
      'property_callbacks' => array('markaspot_icon_field_property_info_callback'), // we add the callback
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function markaspot_icon_field_field_is_empty($item, $field) {
  return empty($item['bundle']) && empty($item['icon']);
}

/**
 * Implements hook_field_instance_settings_form().
 */
function markaspot_icon_field_field_instance_settings_form($field, $instance) {
  $form = array();
  return $form;
}

/**
 * Implements hook_field_widget_info().
 */
function markaspot_icon_field_field_widget_info() {
  return array(
    'markaspot_icon_field' => array(
      'label' => 'Mark-a-Spot Icon',
      'field types' => array('markaspot_icon_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function markaspot_icon_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'icon_selector',
    '#default_bundle' => isset($items[$delta]['bundle']) ? $items[$delta]['bundle'] : '',
    '#default_icon' => isset($items[$delta]['icon']) ? $items[$delta]['icon'] : '',
  );
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function markaspot_icon_field_field_formatter_info() {
  return array(
    'markaspot_icon_field_default' => array(
      'label' => t('Mark-a-Spot Icon'),
      'field types' => array('markaspot_icon_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function markaspot_icon_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function markaspot_icon_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  return '';
}

/**
 * Implements hook_field_formatter_view().
 */
function markaspot_icon_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();

  foreach ($items as $delta => $item) {
    switch ($item['bundle']) {
      case 'fontawesome':
        $class_prefix = 'fa fa-';
        break;
      case 'markaspot':
        $class_prefix = 'icon-';
        break;
      case 'fontello':
        $class_prefix = 'icon-';
        break;
      case 'bootstrap':
        $class_prefix = 'glyphicon';
        break;
      default:
        $class_prefix = 'icon-';
    }
    // $class_prefix = ($item['bundle'] == 'markaspot') ? '' : strip_tags($item['bundle']);
    $elements[$delta] = array('#markup' => strip_tags($class_prefix . $item['icon']));
  }
  return $elements;
}

/**
 * Callback to make field available in Search API
 * Takenfrom http://www.thecarneyeffect.co.uk/describe-field-properties-make-custom-fields-work-entity-metadata-wrappers
 *
 * @param $info
 * @param $entity_type
 * @param $field
 * @param $instance
 * @param $field_type
 */
function markaspot_icon_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {

  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);
  $property['property info'] = markaspot_icon_field_property_info();
}


function markaspot_icon_field_property_info() {
  $properties = array(
    'icon' => array(
      'type' => 'text',
      'label' => t('Icon'),
      'getter callback' => 'entity_property_verbatim_get',
    ),
    'bundle' => array(
      'type' => 'text',
      'label' => t('Icon Bundle'),
      'getter callback' => 'entity_property_verbatim_get',
    ),
    'class' => array(
      'type' => 'text',
      'label' => t('Icon Class'),
      'getter callback' => 'markaspot_icon_field_get_prefix',
    ),
  );

  return $properties;
}


/**
 * Gets the a class property.
 *
 * @return string
 */
function markaspot_icon_field_get_prefix($data, array $options, $name, $type, $info){

  if ((is_array($data) || (is_object($data) && $data instanceof ArrayAccess))) {
    $class_prefix =  markaspot_icon_field_switch_prefix($data['bundle']);
    return $class_prefix . $data['icon'];
  }
  return '';
}

/**
 * Return icon bundle specific class prefixes for indexable field.
 * @param $bundle
 *
 * @return string
 */
function markaspot_icon_field_switch_prefix($bundle) {
  switch ($bundle) {
    case 'fontawesome':
      $class_prefix = 'fa fa-';
      break;
    case 'markaspot':
      $class_prefix = 'icon-';
      break;
    case 'fontello':
      $class_prefix = 'icon-';
      break;
    case 'bootstrap':
      $class_prefix = 'glyphicon ';
      break;
    default:
      $class_prefix = 'icon-';
  }
  return $class_prefix;
}