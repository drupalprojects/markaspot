<?php
/**
 * @file
 * This module provides hooks for altering the report form and
 * custom UUID generator
 * http://drupal.org/node/1588044
 */


/**
 * Implements hook_form_FORM_ID_alter().
 */
function markaspot_uuid_form_report_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the title form field as it is generated via hook_insert
  $form['title']['#type'] = "hidden";
  $form['title']['#required'] = FALSE;
}


/**
 * Generates an universally unique identifier.
 *
 * This function first checks for the PECL alternative for generating
 * universally unique identifiers. If that doesn't exist, then it falls back on
 * PHP for generating that.
 *
 * @return string
 *   An UUID, made up of year, month and 8 hex digits.
 */
function markaspot_uuid_generate_uuid($entity) {
  $id_field = NULL;
  if (isset($entity->type) && $entity->type == 'report') {
    $callback = 'markaspot_uuid_generate_mas';
  } else {
    $callback = '_uuid_generate_php';
  }
  return $callback($id_field);
}

/**
 *  Implements hook_entity_presave().
 */
function markaspot_uuid_entity_presave($entity, $type) {
  $info = entity_get_info('node');
  if (isset($info['uuid']) && $info['uuid'] == TRUE && !empty($info['entity keys']['uuid'])) {
    $uuid_key = $info['entity keys']['uuid'];
    if (empty($entity->{$uuid_key})) {
      $entity->{$uuid_key} = markaspot_uuid_generate_uuid($entity);
    }
    if (!empty($info['entity keys']['revision uuid'])) {
      $vuuid_key = $info['entity keys']['revision uuid'];
      // If this entity comes from a remote environment and have a revision UUID
      // that exists locally we should not create a new revision. Because
      // otherwise revisions won't be tracked universally.
      // TODO: Move code dependent on the uuid_services module into it's own
      // implementation of hook_entity_presave().
      if (!empty($entity->uuid_services) && isset($entity->{$vuuid_key})) {
        $vuuid_exists = (bool) entity_get_id_by_uuid($entity_type, array($entity->{$vuuid_key}), TRUE);
        if ($vuuid_exists) {
          $entity->revision = FALSE;
        }
      }

      if ((isset($entity->revision) && $entity->revision == TRUE && empty($entity->uuid_services)) || empty($entity->{$vuuid_key})) {
        $entity->{$vuuid_key} = markaspot_uuid_generate_uuid($entity);
      }
    }
  }
}

/**
 * Generating a human readable UUID (not really GUID).
 *
 * @return string
 *   the UUID
 */
function markaspot_uuid_generate_mas($id_field) {

  // First get the last inserted node-id.
  if($id_field == NULL){
    $last_nid = db_query(db_query_range("SELECT nid FROM {node} ORDER BY nid DESC", 0, 1))->fetchField();
    $next_nid = $last_nid + 1;
  } else {
    $next_nid = $id_field;
  }
  // Assuming other entities will be less frequently generated.
  // Taxonomies should still be unique.
  $uuid_pattern = array(
    '%04x','0x%1x','%04x%04x',
  );

  $uuid_preset_length = variable_get('markaspot_logic_uuid_pattern', 0);
  $uuid_offset = variable_get('markaspot_logic_uuid_offset', 0);
  $next_id = ($next_nid - $uuid_offset > 0) ? $next_nid - $uuid_offset : $next_nid;

  if ($uuid_preset_length <= 2) {

    return sprintf($uuid_pattern[$uuid_preset_length],
      // 32 bits for "time_low".
      mt_rand(0, 65535),
      // 16 bits for "time_mid".
      mt_rand(0, 65535)) . '-' . $next_id;
  }
  elseif ($uuid_preset_length == 3){

    return format_date(time(), 'custom', variable_get('markaspot_logic_uuid_prefix')) . '-' . $next_id;
  }
  else {

    return variable_get('markaspot_logic_uuid_prefix', 'A') . '-' . $next_id;
  }
}

/**
 * Implements hook_uuid_sync().
 */
function markaspot_uuid_uuid_sync() {
  foreach (entity_get_info() as $entity_type => $info) {
    if (isset($info['uuid']) && $info['uuid'] == TRUE && !empty($info['entity keys']['uuid'])) {
      _markaspot_uuid_sync_table($info['base table'], $info['entity keys']['id'], $info['entity keys']['uuid']);
      if (!empty($info['entity keys']['revision uuid'])) {
        _markaspot_uuid_sync_table($info['revision table'], $info['entity keys']['revision'], $info['entity keys']['revision uuid']);
      }
    }
  }
}

/**
 * Helper function that executes the update on the actual table.
 */
function _markaspot_uuid_sync_table($table, $id_field, $uuid_field) {
  // Fetch all exiting entity ids.
  $result = db_select($table, 't')
    ->fields('t', array($id_field))
    // ->condition(db_or()->condition($uuid_field, '')->isNull($uuid_field))
    ->execute();



  // Update empty depending on table records.
  // Nodes get special uuid according to Mark-a-Spot Settings
  foreach ($result as $record) {

    if($table == 'node'){
      $create_function = _markaspot_uuid_uuid_generate($record->{$id_field});
    } else {
      $create_function = uuid_generate($record->{$id_field});
    }

    db_update($table)
      ->fields(array($uuid_field => $create_function))
      ->condition($id_field, $record->{$id_field})
      ->execute();
  }
}

function _markaspot_uuid_uuid_generate($id_field) {
  $callback = drupal_static(__FUNCTION__);

  if (empty($callback)) {
    if (function_exists('markaspot_uuid_generate_uuid')){
      $callback = 'markaspot_uuid_generate_uuid';
      return $callback($id_field);
    }
  }
  return $callback();
}

/**
 * Implements hook_node_insert().
 *
 * Need to update the title field with UUID
 */
function markaspot_uuid_node_insert($node) {

  if ($node->type == 'report') {
    // Instead of contributed module auto entity_title:
    // Get the service name by ID and update the title field.
    $tid = $node->field_category[LANGUAGE_NONE][0]['tid'];
    $service = taxonomy_term_load($tid);
    markaspot_uuid_update_title($node, $service);
  }
}

/**
 * Implements hook_node_update().
 *
 * Need to update the title field with UUID
 */
function markaspot_uuid_node_update($node) {

  if ($node->type == 'report') {
    // Instead of contributed module auto entity_title:
    // Get the service name by ID and update the title field.
    $tid = $node->field_category[LANGUAGE_NONE][0]['tid'];
    $service = taxonomy_term_load($tid);
    markaspot_uuid_update_title($node, $service);
  }
}


/**
 * Generating a title.
 *
 * @param object $node
 *   The node object
 *
 * @param object $service
 *   The term by $tid
 */
function markaspot_uuid_update_title($node, $service) {
  $title_pattern = variable_get('markaspot_logic_title_pattern', 0);

  if (variable_get('markaspot_logic_uuid_title') == 1) {
    $generated_title = array(
      $service->name . ' #' . $node->uuid,
      '#' . $node->uuid . " " . $service->name,
    );
  }
  else {
    $title_pattern = "default";
    $generated_title["default"] = $service->name;
  }

  db_update('node')
    ->fields(array(
      'title' => $generated_title[$title_pattern],
    ))
    ->condition('nid', $node->nid, '=')
    ->execute();

  db_update('node_revision')
    ->fields(array(
      'title' => $generated_title[$title_pattern],
    ))
    ->condition('nid', $node->nid, '=')
    ->execute();
}
