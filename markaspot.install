<?php
/**
 * @file
 * Enables modules and site configuration for a standard site installation.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function markaspot_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Disable the default Bartik theme.
  theme_disable(array('bartik'));

  // Any themes without keys here will get numeric keys and so will be enabled,
  // but not placed into variables.
  $enable = array(
    'theme_default' => 'mas',
    'admin_theme' => 'ember',
  );
  theme_enable($enable);

  foreach ($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'mas');
  $admin_theme = 'ember';

  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'markaspot_stats',
      'delta' => 'markaspot_stats',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -100,
      'region' => 'sidebar_second',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'comment',
      'delta' => 'recent',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'sidebar_second',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(
    array(
      'module',
      'delta',
      'theme',
      'status',
      'weight',
      'region',
      'pages',
      'cache',
    )
  );
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date + author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
      'access content',
      'access comments',
      $filtered_html_permission,
    )
  );
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
      'access content',
      'access comments',
      'post comments',
      'skip comment approval',
      $filtered_html_permission,
    )
  );

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => 'Home',
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'ember')
    ->execute();
  variable_set('admin_theme', 'ember');
  variable_set('node_admin_theme', '1');

  // Enable some modules.
  $module_list = array('jquery_update');
  module_enable($module_list);

  variable_set('jquery_update_jquery_version', '1.7');
  // Setting some Mark-a-Spot default values.
  variable_set('markaspot_logic_map_type', '2');
  variable_set('markaspot_logic_zip', '50321');
  variable_set('markaspot_logic_city', 'BrÃ¼hl');
  variable_set('markaspot_logic_country', 'Deutschland');
  variable_set('markaspot_logic_ini_lat', '50.8212596');
  variable_set('markaspot_logic_ini_lng', '6.8961028');
  variable_set('markaspot_logic_twittername', '@mascity');
  variable_set('markaspot_logic_tweetSearch', 1);
  variable_set('markaspot_logic_radar_zoom', 10);
  variable_set('site_name', 'Track issues MaS-City');
  variable_set('site_slogan', 'Report local problems in your area and track government fixing them');
  variable_set('markaspot_logic_open311_status_open', array(5,6));
  variable_set('markaspot_logic_open311_status_closed', array(7,8));
}


/**
 * Check for color_field module.
 *
 */
function markaspot_update_7200(){
  module_enable(array('color_field'));
  if (!module_exists('color_field')) {
    throw new DrupalUpdateException(t('Color Field module has to be installed to run updates'));
  }
}

/**
 * Updates field_status_hex and field_category_hex for use of colorfield.
 *
 */
function markaspot_update_7201() {

  db_change_field('field_data_field_status_hex', 'field_status_hex_value', 'field_status_hex_rgb',
    array('type' => 'varchar', 'length' => 7));
  db_change_field('field_revision_field_status_hex', 'field_status_hex_value', 'field_status_hex_rgb',
    array('type' => 'varchar', 'length' => 7));

  db_change_field('field_data_field_category_hex', 'field_category_hex_value', 'field_category_hex_rgb',
    array('type' => 'varchar', 'length' => 7));
  db_change_field('field_revision_field_category_hex', 'field_category_hex_value', 'field_category_hex_rgb',
    array('type' => 'varchar', 'length' => 7));

  $num_updated = db_update('field_config')
    ->fields(array(
      'module' => 'color_field',
      'type' => 'color_field_rgb',
    ))
    ->condition('field_name', 'field_status_hex', '=')
    ->execute();

  $num_updated = db_update('field_config')
    ->fields(array(
      'module' => 'color_field',
      'type' => 'color_field_rgb',
    ))
    ->condition('field_name', 'field_category_hex', '=')
    ->execute();
}


/**
 * Adds # to hex rgb field for status data table.
 *
 */
function markaspot_update_7202() {

  $query = db_select('field_data_field_status_hex', 'n');
  $query->fields('n', array('field_status_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_status_hex')
      ->fields(array(
        'field_status_hex_rgb' => '#' . $record['field_status_hex_rgb'],
      ))
      ->execute();
  }
}


/**
 * Adds # to hex rgb field for category data table.
 *
 */
function markaspot_update_7203() {

  $query = db_select('field_data_field_category_hex', 'n');
  $query->fields('n', array('field_category_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_category_hex')
      ->fields(array(
        'field_category_hex_rgb' => '#' . $record['field_category_hex_rgb'],
      ))
      ->execute();
  }
}

/**
 * Adds # to hex rgb field for category revision table.
 *
 */
function markaspot_update_7204() {

  $query = db_select('field_revision_field_category_hex', 'n');
  $query->fields('n', array('field_category_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_category_hex')
      ->fields(array(
        'field_category_hex_rgb' => '#' . $record['field_category_hex_rgb'],
      ))
      ->execute();
  }
}

/**
 * Adds # to hex rgb field for status revision table.
 *
 */
function markaspot_update_7205() {

  $query = db_select('field_revision_field_status_hex', 'n');
  $query->fields('n', array('field_status_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_status_hex')
      ->fields(array(
        'field_status_hex_rgb' => '#' . $record['field_status_hex_rgb'],
      ))
      ->execute();
  }
}

/**
 * Updates field widget for category hex field.
 *
 */
function markaspot_update_7206() {
  markaspot_change_form_widget('taxonomy_term', 'category', 'field_category_hex', 'color_field_default_widget');
  markaspot_change_form_widget('taxonomy_term', 'status', 'field_status_hex', 'color_field_default_widget');

}


/**
 * Change form widget for a field.
 *
 * @param $entity_type
 *  Entity the field attached to.
 * @param $bundle
 *  Bundle the field attached to.
 * @param $field_name
 *  Field name.
 * @param $widget_type_machine_name
 *  Machine name of the field widget
 */
function markaspot_change_form_widget($entity_type, $bundle, $field_name, $widget_type_machine_name) {
  // Retrieve the stored instance settings to merge with the incoming values.
  $instance = field_read_instance($entity_type, $field_name, $bundle);
  // Set the right module information.
  $widget_type = field_info_widget_types($widget_type_machine_name);
  $widget_module = $widget_type['module'];

  $instance['widget']['type'] = $widget_type_machine_name;
  $instance['widget']['module'] = $widget_module;

  // Update field instance
  field_update_instance($instance);
  $field = array(
    'field_name' => $field_name,
    'settings' => array('default_colors' => '#FF0000, #8B0000, #FFA500, #008000, #006400, #0000FF, #00008B, #800080, #871F78, #5F9EA0, #D3D3D3, #808080, #000000, #F5F5DC, #FFFFFF'),
  );
  field_update_field($field);
}