<?php
/**
 * @file
 * Enables modules and site configuration for a Mark-a-Spot installation.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function markaspot_install() {
  // Increase maximum function nesting level to prevent install errors.
  $max_nesting_level = ini_get('xdebug.max_nesting_level');
  if ($max_nesting_level > 0 && $max_nesting_level <= '200') {
    ini_set('xdebug.max_nesting_level', 200);
  }
  ini_set('max_execution_time', '300');

  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Any themes without keys here will get numeric keys and so will be enabled,
  // but not placed into variables.
  $enable = array(
    'theme_default' => 'mas',
    'admin_theme' => 'ember',
  );
  theme_enable($enable);

  // Disable the default Bartik theme.
  theme_disable(array('bartik, seven'));

  foreach ($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'mas');
  $admin_theme = 'ember';

  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'markaspot_stats',
      'delta' => 'markaspot_stats',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -100,
      'region' => 'sidebar_second',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'comment',
      'delta' => 'recent',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'sidebar_second',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(
    array(
      'module',
      'delta',
      'theme',
      'status',
      'weight',
      'region',
      'pages',
      'cache',
    )
  );
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date + author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
      'access content',
      'access comments',
      $filtered_html_permission,
    )
  );
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
      'access content',
      'access comments',
      'post comments',
      'skip comment approval',
      $filtered_html_permission,
    )
  );

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => 'Home',
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  // menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'ember')
    ->execute();
  variable_set('admin_theme', 'ember');
  variable_set('node_admin_theme', '1');

  // Enable some modules.
  $module_list = array('jquery_update');
  module_enable($module_list);

  variable_set('jquery_update_jquery_version', '1.7');
}

/**
 * Implements hook_install_tasks()
 */
function markaspot_install_tasks(&$install_state) {

  $tasks = array();
  $tasks['markaspot_flush_cashes'] = array(
    'display_name' => st('Flush drupal caches'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => INSTALL_TASK_RUN_IF_REACHED,
    'function' => 'markaspot_flush_cashes',
  );
  /*
  $tasks['markaspot_enable_icon_api'] = array(
    'display_name' => st('Enable Icon API'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => INSTALL_TASK_RUN_IF_REACHED,
    'function' => 'markaspot_enable_icon_api',
  );
  */

  $tasks['markaspot_install_content'] = array(
    'display_name' => st('Create some content'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => INSTALL_TASK_RUN_IF_REACHED,
    'function' => 'markaspot_install_content',
  );



  // Add our custom CSS file for the installation process
  drupal_add_css(drupal_get_path('profile', 'markaspot') . '/markaspot.css');

  return $tasks;
}

/**
 * Create default Content.
 *
 * @param string $install_state
 *   An array of information about the current installation state.
 *
 * @return string
 *   Message on Complete
 */
function markaspot_install_content() {
  global $install_state;
  // print dd($install_state);

  // ini_set("auto_detect_line_endings", TRUE);

  $operations = array();
  // Saving taonomies for category:
  $operations[] = array('_markaspot_create_categories', array(t('Create categories.')));
  // Saving taxonomies for status:
  $operations[] = array('_markaspot_create_status', array(t('Create status.')));
  // Saving taxonomies for jurisdiction:
  $operations[] = array('_markaspot_create_jurisdiction', array(t('Create jurisdictions.')));
  // Creating example node:
  $operations[] = array('_markaspot_create_reports', array(t('Create example reports')));
  // Activating blocks:
  $operations[] = array('_markaspot_build_blocks',  array(t('Create Blocks')));
  // Deleting dummy entries:
  $operations[] = array('_markaspot_delete_dummies', array(t('Create dummy content')));
  // Create slider image files:
  $operations[] = array('_markaspot_create_pages', array(t('Create example pages')));

  $batch = array(
    'title' => t('Importing content'),
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'markaspot') . '/markaspot.install_callbacks.inc',
  );


  return $batch;
}


function markaspot_flush_cashes(){
  global $install_state;

  $operations[] = array('_markaspot_flush_cashes', array());

  $batch = array(
    'title' => t('Flush drupal cashes'),
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'markaspot') . '/markaspot.install_callbacks.inc',
  );

  return $batch;

}


function markaspot_enable_icon_api(){
  global $install_state;

  $operations[] = array('_markaspot_enable_module', array('icon', array('Icon API')));

  $batch = array(
    'title' => t('Enabling Icon API'),
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'markaspot') . '/markaspot.install_callbacks.inc',
  );

  return $batch;

}


function markaspot_install_finished(){
  drupal_set_title(st('Mark-a-Spot installation complete'));
  $messages = drupal_set_message();

  $output  = '<p>' . st('Congratulations, you installed Mark-a-Spot @drupal!', array('@drupal' => drupal_install_profile_distribution_name())) . '</p>';
  $output .= '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the install profile are registered correctly.
  drupal_flush_all_caches();

  // Remember the profile which was used:
  variable_set('install_profile', drupal_get_profile());

  // Clean Urls:
  variable_set('clean_url', 1);
  variable_set('chosen_minimum_single', 3);

  // Install profiles are always loaded last:
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();

  // Cache a fully-built schema:
  drupal_get_schema(NULL, TRUE);
  // Set icon view path
  variable_set('icon_api_view_path_alias', 'icons');

  return $output;

}


/**
 * Check for color_field module.
 *
 */
function markaspot_update_7200(){
  module_enable(array('color_field'));
  if (!module_exists('color_field')) {
    throw new DrupalUpdateException(t('Color Field module has to be installed to run updates'));
  }
}

/**
 * Updates field_status_hex and field_category_hex for use of colorfield.
 *
 */
function markaspot_update_7201() {

  db_change_field('field_data_field_status_hex', 'field_status_hex_value', 'field_status_hex_rgb',
    array('type' => 'varchar', 'length' => 7));
  db_change_field('field_revision_field_status_hex', 'field_status_hex_value', 'field_status_hex_rgb',
    array('type' => 'varchar', 'length' => 7));

  db_change_field('field_data_field_category_hex', 'field_category_hex_value', 'field_category_hex_rgb',
    array('type' => 'varchar', 'length' => 7));
  db_change_field('field_revision_field_category_hex', 'field_category_hex_value', 'field_category_hex_rgb',
    array('type' => 'varchar', 'length' => 7));

  $num_updated = db_update('field_config')
    ->fields(array(
      'module' => 'color_field',
      'type' => 'color_field_rgb',
    ))
    ->condition('field_name', 'field_status_hex', '=')
    ->execute();

  $num_updated = db_update('field_config')
    ->fields(array(
      'module' => 'color_field',
      'type' => 'color_field_rgb',
    ))
    ->condition('field_name', 'field_category_hex', '=')
    ->execute();
}


/**
 * Adds # to hex rgb field for status data table.
 *
 */
function markaspot_update_7202() {

  $query = db_select('field_data_field_status_hex', 'n');
  $query->fields('n', array('field_status_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_status_hex')
      ->fields(array(
        'field_status_hex_rgb' => '#' . $record['field_status_hex_rgb'],
      ))
      ->execute();
  }
}


/**
 * Adds # to hex rgb field for category data table.
 *
 */
function markaspot_update_7203() {

  $query = db_select('field_data_field_category_hex', 'n');
  $query->fields('n', array('field_category_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_category_hex')
      ->fields(array(
        'field_category_hex_rgb' => '#' . $record['field_category_hex_rgb'],
      ))
      ->execute();
  }
}

/**
 * Adds # to hex rgb field for category revision table.
 *
 */
function markaspot_update_7204() {

  $query = db_select('field_revision_field_category_hex', 'n');
  $query->fields('n', array('field_category_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_category_hex')
      ->fields(array(
        'field_category_hex_rgb' => '#' . $record['field_category_hex_rgb'],
      ))
      ->execute();
  }
}

/**
 * Adds # to hex rgb field for status revision table.
 *
 */
function markaspot_update_7205() {

  $query = db_select('field_revision_field_status_hex', 'n');
  $query->fields('n', array('field_status_hex_rgb', 'entity_id'));

  $result = $query->execute();
  while (
  $record = $result->fetchAssoc()) {
    db_update('field_data_field_status_hex')
      ->fields(array(
        'field_status_hex_rgb' => '#' . $record['field_status_hex_rgb'],
      ))
      ->execute();
  }
}

/**
 * Updates field widget for category hex field.
 *
 */
function markaspot_update_7206() {
  markaspot_change_form_widget('taxonomy_term', 'category', 'field_category_hex', 'color_field_default_widget');
  markaspot_change_form_widget('taxonomy_term', 'status', 'field_status_hex', 'color_field_default_widget');

}

/**
 * Enable Spark modules (Navbar and ckeditor).
 *
 */
function markaspot_update_7207() {
  module_enable(array('navbar', 'ckeditor'));

  if (!module_exists('navbar') || !module_exists('ckeditor')) {
    throw new DrupalUpdateException(t('Navbar and ckeditor has to be installed to run updates'));
  } else {
    module_disable(array('admin_menu'));
  }
}



/**
 * Updates field_status_icon and field_category_icon for use of list fields.
 *
 */
function markaspot_update_7208() {

  $num_updated = db_update('field_config')
    ->fields(array(
      'module' => 'list',
      'type' => 'list_text',
    ))
    ->condition('field_name', 'field_status_icon', '=')
    ->execute();

  $num_updated = db_update('field_config')
    ->fields(array(
      'module' => 'list',
      'type' => 'list_text',
    ))
    ->condition('field_name', 'field_category_icon', '=')
    ->execute();
}



/**
 * Updates field widget for category and status icon field.
 *
 */
function markaspot_update_7209() {
  markaspot_change_form_widget('taxonomy_term', 'category', 'field_category_icon', 'options_select');
  markaspot_change_form_widget('taxonomy_term', 'status', 'field_status_icon', 'options_select');

  markaspot_update_color_field('field_category_hex');
  markaspot_update_color_field('field_status_hex');

  markaspot_set_allowed_value_list('field_category_icon');
  markaspot_set_allowed_value_list('field_status_icon');
}


/**
 * Updates field_status_icon and field_category_icon for use of Icon API.
 *
 */
function markaspot_update_7210() {
  module_enable(array('icon', 'markaspot_icon_field'));

  if (module_exists('icon') && module_exists('markaspot_icon_field')) {

    db_add_field('field_data_field_category_icon', 'field_category_icon_bundle', array(
      'type' => 'varchar',
      'length' => 64,
      'not null' => TRUE,
      'default' => '',
    ));

    db_add_field('field_revision_field_category_icon', 'field_category_icon_bundle', array(
      'type' => 'varchar',
      'length' => 64,
      'not null' => TRUE,
      'default' => '',
    ));

    db_add_field('field_data_field_status_icon', 'field_status_icon_bundle', array(
      'type' => 'varchar',
      'length' => 64,
      'not null' => TRUE,
      'default' => '',
    ));

    db_add_field('field_revision_field_status_icon', 'field_status_icon_bundle', array(
      'type' => 'varchar',
      'length' => 64,
      'not null' => TRUE,
      'default' => '',
    ));

    db_change_field('field_data_field_status_icon', 'field_status_icon_value', 'field_status_icon_icon',
      array('type' => 'varchar', 'length' => 64));
    db_change_field('field_revision_field_status_icon', 'field_status_icon_value', 'field_status_icon_icon',
      array('type' => 'varchar', 'length' => 64));

    db_change_field('field_data_field_category_icon', 'field_category_icon_value', 'field_category_icon_icon',
      array('type' => 'varchar', 'length' => 64));
    db_change_field('field_revision_field_category_icon', 'field_category_icon_value', 'field_category_icon_icon',
      array('type' => 'varchar', 'length' => 64));

    $num_updated = db_update('field_config')
      ->fields(array(
        'module' => 'markaspot_icon_field',
        'type' => 'markaspot_icon_field',
      ))
      ->condition('field_name', 'field_status_icon', '=')
      ->execute();

    $num_updated = db_update('field_config')
      ->fields(array(
        'module' => 'markaspot_icon_field',
        'type' => 'markaspot_icon_field',
      ))
      ->condition('field_name', 'field_category_icon', '=')
      ->execute();

    markaspot_change_form_widget('taxonomy_term', 'category', 'field_category_icon', 'markaspot_icon_field');
    markaspot_change_form_widget('taxonomy_term', 'status', 'field_status_icon', 'markaspot_icon_field');


    $num_updated = db_update('field_data_field_category_icon')
      ->fields(array(
        'field_category_icon_bundle' => 'markaspot-font',
      ))
      ->condition('field_category_icon_bundle', '', '=')
      ->execute();
    $num_updated = db_update('field_data_field_status_icon')
      ->fields(array(
        'field_status_icon_bundle' => 'markaspot-font',
      ))
      ->condition('field_status_icon_bundle', '', '=')
      ->execute();
  }
}


/**
 * Revert Mark-a-Spot feature for use of Search API as backend.
 *
 */
function markaspot_update_7211(){
  module_enable(array('search_api', 'search_api_db', 'search_api_views'));

  if (!module_exists('search_api') || !module_exists('search_api_db') || !module_exists('search_api_views')) {
    throw new DrupalUpdateException(t('Search API and Search API db have to be installed to run updates'));
  } else {
    cache_clear_all();
    features_revert(array('mark_a_spot' => array('field_base', 'field_instance')));
    features_revert(array('mark_a_spot' => array('views_default')));
    features_revert(array('mark_a_spot' => array('search_api_server')));
    features_revert(array('mark_a_spot' => array('search_api_index')));

    cache_clear_all();

    drupal_load('module', array('search_api', 'search_api_db'));

    $index = search_api_index_load('default_report_index');

    if (!empty($index)) {
      search_api_index_items($index, 100);
    }
  }

}


/**
 * Change allowed values for icon field.
 *
 * @param $field_name
 *  Field name.
 */
function markaspot_set_allowed_value_list($field_name) {
  $field = field_info_field($field_name);

  $field['settings'] = array(
    'allowed_values' => array(
      'brightness-medium' => 'brightness-medium',
      'remove' => 'remove',
      'bullhorn' => 'bullhorn',
      'droplet' => 'droplet',
      'location2' => 'location2',
      'location' => 'location',
      'office' => 'office',
      'bubbles2' => 'bubbles2',
      'bug' => 'bug',
      'leaf' => 'leaf',
      'lab' => 'lab',
      'car' => 'car',
      'pause' => 'pause',
      'bubbles' => 'bubbles',
      'checkmark' => 'checkmark',
      'play' => 'play',
      'close' => 'close',
      'headphones' => 'headphones',
      'drawer' => 'drawer',
      'sign' => 'sign',
      'tree' => 'tree',
      'wi-fi' => 'wi-fi',
      'warning' => 'warning',
      'info' => 'info',
      'phone' => 'phone',
      'grin' => 'grin',
      'umbrella' => 'umbrella',
      'truck' => 'truck',
      'exclamation-sign' => 'exclamation-sign',
      'road' => 'road',
      'medkit' => 'medkit',
      'heart' => 'heart',
      'envelope' => 'envelope',
      'sun' => 'sun',
      'fire-extinguisher' => 'fire-extinguisher',
      'thumbs-up' => 'thumbs-up',
      'thumbs-down' => 'thumbs-down',
      'bell' => 'bell',
      'twitter' => 'twitter',
      'facebook' => 'facebook',
      'heart-outline' => 'heart-outline',
      'directions' => 'directions',
      'feather' => 'feather',
      'share' => 'share',
      'bell2' => 'bell2',
      'moon' => 'moon',
      'new' => 'new',
      'shuffle' => 'shuffle',
      'switch' => 'switch',
      'cc' => 'cc',
      'pedestrian' => 'pedestrian',
      'bike' => 'bike',
      'motobike' => 'motobike',
      'skate' => 'skate',
      'trash' => 'trash',
      'headphone2' => 'headphone2',
      'camera' => 'camera',
      'minus-circle' => 'minus-circle',
      'remove-circle' => 'remove-circle',
      'check-circle' => 'check-circle',
      'info-circle' => 'info-circle',
      'remove-circle-o' => 'remove-circle-o',
      'check-circle-o' => 'check-circle-o',
      'eye' => 'eye',
      'warning2' => 'warning2',
      'wrench' => 'wrench',
      'flash' => 'flash',
      'building' => 'building',
      'fighter-jet' => 'fighter-jet',
      'recycle' => 'recycle',
      'bridge' => 'bridge',
      'graffiti' => 'graffiti',
      'wheelchair' => 'wheelchair',
    ),
  );
  field_update_field($field);
}



/**
 * Change form widget for a field.
 *
 * @param $entity_type
 *  Entity the field attached to.
 * @param $bundle
 *  Bundle the field attached to.
 * @param $field_name
 *  Field name.
 * @param $widget_type_machine_name
 *  Machine name of the field widget
 */
function markaspot_change_form_widget($entity_type, $bundle, $field_name, $widget_type_machine_name) {
  // Retrieve the stored instance settings to merge with the incoming values.
  $instance = field_read_instance($entity_type, $field_name, $bundle);
  // Set the right module information.
  $widget_type = field_info_widget_types($widget_type_machine_name);
  $widget_module = $widget_type['module'];

  $instance['widget']['type'] = $widget_type_machine_name;
  $instance['widget']['module'] = $widget_module;

  // Update field instance
  field_update_instance($instance);
}

function markaspot_update_color_field($field_name) {
  $field = array(
    'field_name' => $field_name,
    'settings' => array('default_colors' => '#FF0000, #8B0000, #FFA500, #008000, #006400, #ADD8E6, #0000FF, #00008B, #A020F0, #871F78, #5F9EA0, #D3D3D3, #808080, #000000, #F5F5DC, #FFFFFF'),
  );
  field_update_field($field);
}